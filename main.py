# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\Instalador.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import shutil
from time import sleep
import subprocess
import multiprocessing
import pyautogui
import pygetwindow as gw
import win32wnet


class Instalar():
    def popen(self, path=None):
        if path == None:
            return
        import datetime
        self.install_popen = subprocess.Popen(path, shell=True)

    def run(self,path, param=""):
        pass
        # command = None
        # if type(path) == list:
        #     command = [path[0], path[1]]
        # else:
        #     command = path
        # try:
        #     subprocess.run(command, shell=True)
        # #veri_program(result)
        #     return True
        # except PermissionError:
        #     print("sem permissão")
    
    def auto_click(self, image : list, exeption=None, programa=None, tentativa=30*60):
        for x in range(tentativa):
            for target in image:

                if self.install_popen.poll() != None:
                    print("finalizado")
                    return

                try:
                    buttom = pyautogui.locateOnScreen(target)
                    pyautogui.click(buttom)
                except:
                    try:
                        buttom = pyautogui.locateOnScreen(target)
                        pyautogui.click(buttom)
                    except:
                        pass
            sleep(1)



    def adobe_reader(self):
        original_file = r"\\patrimar089\e$\Programas\Outros\adobe_reader\adobe_reader.exe"
        copy_file = r"\\patrimar089\e$\Programas\Outros\adobe_reader\adobe_reader_temp.exe"
        backup_file = r"\\patrimar089\e$\Programas\Outros\adobe_reader\backup\adobe_reader.exe"
        try:
            shutil.copy(original_file, copy_file)
        except Exception as error:
            shutil.copy(backup_file, copy_file)
        path = r"\\patrimar089\e$\Programas\Outros\adobe_reader\adobe_reader_temp.exe"
        self.popen(path)
        bt = [
            r"onde_clicar\adobe\bt_concluir.PNG"
        ]
        self.auto_click(bt)
        return
        return install_popen(path, clicar=r"onde_clicar\bt_concluir.PNG", programa="Adobe Acrobat Reader DC Instalador")

class Ui_Instalador(object):
    def __init__(self):
        self.programas = {
            "padrao":"Programas Padrão",
            "adobe_reader":"Adobe Reader", 
            "driver_wifi":"Driver para Adaptador WIFI", 
            "sap770": "SAP Versão 770", 
            "open_vpn": "Open VPN", 
            "office_2016": "Office 2016 Escritorio", 
            "office365" : "Office 365", 
            "sketchup_viewer_2022" : "Visualizador do Sketchup 2022", 
            "driver_hp": "Drive Video e Audio do HP G8 250 *Carregamento Demorado*", 
            "project" : "Project",
            "power_bi" : "Power BI", 
            "bizagi" : "Bizagi", 
        }
    def setupUi(self, Instalador):
        Instalador.setObjectName("Instalador")
        Instalador.resize(480, 420)
        Instalador.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        Instalador.setFocusPolicy(QtCore.Qt.NoFocus)
        self.verticalLayoutWidget = QtWidgets.QWidget(Instalador)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(20, 10, 441, 301))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.lista_programas = QtWidgets.QListWidget(self.verticalLayoutWidget)

        #lista
        self.lista_programas.setObjectName("lista_programas")
        self.enumerar_programas = []
        for key,valor in self.programas.items():
            item = QtWidgets.QListWidgetItem()
            item.setCheckState(QtCore.Qt.Unchecked)
            self.lista_programas.addItem(item)
            self.enumerar_programas.append(key)
        self.verticalLayout.addWidget(self.lista_programas)

        self.horizontalLayoutWidget = QtWidgets.QWidget(Instalador)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(20, 360, 441, 51))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.aviso = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.aviso.setObjectName("aviso")
        self.horizontalLayout.addWidget(self.aviso)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(Instalador)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(300, 320, 160, 31))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")

        #instalar
        self.instalar = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.instalar.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.instalar.setObjectName("instalar")
        self.instalar.clicked.connect(self.pre_executar)
        self.verticalLayout_2.addWidget(self.instalar)

        #barra de progresso
        self.barra_progress = QtWidgets.QProgressBar(Instalador)
        self.barra_progress.setGeometry(QtCore.QRect(20, 320, 271, 31))
        self.barra_progress.setProperty("value", 24)
        self.barra_progress.setObjectName("barra_progress")

        self.retranslateUi(Instalador)
        QtCore.QMetaObject.connectSlotsByName(Instalador)

    def retranslateUi(self, Instalador):
        _translate = QtCore.QCoreApplication.translate
        Instalador.setWindowTitle(_translate("Instalador", "Dialog"))
        __sortingEnabled = self.lista_programas.isSortingEnabled()

        self.lista_programas.setSortingEnabled(False)
        for cont,valor in enumerate(self.enumerar_programas):
            item = self.lista_programas.item(cont)
            item.setText(_translate("Instalador", self.programas[valor]))
        self.lista_programas.setSortingEnabled(__sortingEnabled)

        self.aviso.setText(_translate("Instalador", "espaço para aviso de texto"))
        self.instalar.setText(_translate("Instalador", "Iniciar Instalação"))
    
    def pre_executar(self):
        processo = multiprocessing.Process(target=self.executar)
        processo.start()

    def executar():
        for key,valor in enumerate(ui.enumerar_programas):
            if ui.lista_programas.item(key).checkState() == 2:
                try:
                    metodo = getattr(instalador, valor)
                    metodo()
                except Exception as error:
                    print(error)
            #print(f"{self.programas[valor]} : {checar}")

    def conectar(self):
        caminho_default = r"\\patrimar089\e$"
        try:
            win32wnet.WNetCancelConnection2(caminho_default,0,True)
        except Exception as error:
            print(f"primeiro desconect: {error}")
        if not os.path.exists(caminho_default):
            user = "administrador"
            senha = "admin01*"
            try:
                try:
                    print(caminho_default)
                    win32wnet.WNetCancelConnection2(caminho_default,0,True)
                except Exception as error:
                    print(f"erro ao desconectar motivo: {error}")
                try:
                    result = win32wnet.WNetAddConnection2(0,None,caminho_default,None,user,senha,0)
                except:
                    print("não foi possivel conectar")
                #print(result)
                if result != None:
                    print(f"não conectado: {result}")
                    print(type(result))
                else:
                    print("conectado")
            except UnboundLocalError as error:
                print(f"não foi possivel conectar motivo: {error}")
                raise Error_Instalador(f"Não foi possivel conectar-se ao servidor {caminho_default}")
        else:
            print("conectado direto")

class Error_Instalador(Exception):
    def __init__(self,msg):
        super().__init__(msg)


if __name__ == "__main__":
    instalador = Instalar()
    instalador.run(["oi"])
    app = QtWidgets.QApplication(sys.argv)
    Instalador = QtWidgets.QDialog()
    ui = Ui_Instalador()
    ui.setupUi(Instalador)
    Instalador.show()
    ui.conectar()
    sys.exit(app.exec_())
